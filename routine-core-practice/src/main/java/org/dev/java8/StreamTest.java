package org.dev.java8;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class StreamTest {
	public static void main(String[] args) {
		// 1. Different ways to create Streams
		Stream<Integer> stream=Stream.of(1,2,3,4,5,6,7,8,9,10);
		stream.forEach(p -> System.out.println(p));
		
		System.out.println("\n"+"------------------------------------------------------"+"\n");
		
		// 1.1
		Stream<Integer> stream1=Stream.of(new Integer[] {1,2,3,4,5,6,7,8,9,10});
		stream1.forEach(p -> System.out.println(p));
		
		System.out.println("\n"+"------------------------------------------------------"+"\n");
		
		// 1.2. List.stream();
		ArrayList<Integer> list=new ArrayList<Integer>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));
		Stream<Integer> stream2=list.stream();
		stream2.forEach(p -> System.out.println(p));
		
		System.out.println("\n"+"------------------------------------------------------"+"\n");
		
		// 1.3 stream.generate() or stream.iterate() this method generates infinite unordered stream where each element is generated by provided supplier.
		Stream<Date> stream3=Stream.generate(() -> { return new Date();});
		//stream3.forEach(p -> System.out.println(p));
		
		// 1.4 String char or String token
		IntStream intstream="12345_abcdefg".chars();
		intstream.forEach(p -> System.out.println(p));
		
		System.out.println("........");
		
		//OR
		Stream<String> stream4=Stream.of("A$B$C".split("\\$"));
		stream4.forEach(p -> System.out.println(p));
		
		System.out.println("\n"+"------------------------------------------------------"+"\n");
		
		
		// 2. Convert Stream to Collection: Stream.collect(Collector.toList());
		ArrayList<Integer> list1=new ArrayList<Integer>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));
		Stream<Integer> stream5=list1.stream();
		List<Integer> evenNumberList=stream5.filter(i -> i%2 == 0).collect(Collectors.toList());
		System.out.println(evenNumberList);
		
		System.out.println("........");
		
		// 2.1 convert Steam to array: Stream.toArray(EntryType[] :: new);
		ArrayList<Integer> list2=new ArrayList<Integer>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));
		Stream<Integer> stream6=list2.stream();
		Integer[] evenIntArray=stream6.toArray(Integer[] :: new);
		System.out.println(evenIntArray); // forEach() only applicable for Collections.
		
		System.out.println("\n"+"------------------------------------------------------"+"\n");
		
		// 3. Core Stream operations
		List<String> memberNames = new ArrayList<>();
		memberNames.add("Amitabh");
		memberNames.add("Shekhar");
		memberNames.add("Aman");
		memberNames.add("Rahul");
		memberNames.add("Shahrukh");
		memberNames.add("Salman");
		memberNames.add("Yana");
		memberNames.add("Lokesh");
		
		// 3.1 Intermediate Operations
		// 3.1.1 Stream.filter();
		memberNames.stream().filter((s) -> s.startsWith("A"))
							.forEach(p -> System.out.println(p));
		
		System.out.println("........");
		
		// 3.1.2 Stream.map(): the intermediate operation map converts each elements into another object via the given function
		memberNames.stream().filter((s) -> s.startsWith("A"))
							.map(String::toUpperCase)
							.forEach(p -> System.out.println(p));
		
		System.out.println("........");
		
		// 3.1.3 Stream.sorted() : DNSO by Comprable, for Customized sorting use Comprator
		memberNames.stream().sorted()
							.map(String::toUpperCase)
							.forEach(p -> System.out.println(p));
		
		System.out.println("\n"+"------------------------------------------------------"+"\n");
		
		// 3.2 Terminal operations
		// 3.2.1 Stream.forEach()
		memberNames.stream().forEach(System.out::println);
		
		System.out.println("\n"+"------------------------------------------------------"+"\n");
			
		// 3.2.2 Stream.collect()
		 List<String> memberNamesUpperCase= memberNames.stream()
				   .map(String::toUpperCase)
				   .collect(Collectors.toList());
		 System.out.println(memberNamesUpperCase);
		 
		 System.out.println("\n"+"------------------------------------------------------"+"\n");
		 
		 // 3.2.3 Stream.match()
		 boolean matchResult=memberNames.stream()
				 .anyMatch((s) -> s.startsWith("A"));
		 	 
		 System.out.println(matchResult);
		 
		 matchResult=memberNames.stream()
				 .allMatch((s) -> s.startsWith("A"));
		 
		 System.out.println(matchResult);
		 
		 matchResult=memberNames.stream()
				 .noneMatch((s) -> s.startsWith("A"));
		 
		 System.out.println(matchResult);
				 
		 System.out.println("\n"+"------------------------------------------------------"+"\n");
		 
		 // 3.2.4 Stream.count()
		 long countResult=memberNames.stream()
				 .filter((s) -> s.startsWith("A"))
				 .count();
		 System.out.println(countResult);
		 
		 System.out.println("\n"+"------------------------------------------------------"+"\n");
		 
		 // 3.2.5 Stream.reduce()
		 Optional<String> reduced = memberNames.stream()
		 .reduce((s1, s2) -> s1+"#"+s2);
		 
		 System.out.println(reduced);
		 
		 
		 System.out.println("\n"+"------------------------------------------------------"+"\n");
		 
		 /* 4. Stream short-circuit operations
		  * Though, stream operations are performed on all elements inside a collection satisfying a predicate, 
		  * It is often desired to break the operation whenever a matching element is encountered during iteration. 
		  * In external iteration, you will do with if-else block. In internal iteration, there are certain methods you can use for this purpose. 
		  * Letâ€™s see example of two such methods:
		  */ 
		 // 4.1 Stream.anyMatch()
		 boolean matched=memberNames.stream()
				 .anyMatch((s) -> s.startsWith("A"));
		 
		 System.out.println(matched);
		 System.out.println("........");
		 
		 // 4.2 Stream.findFirst()
		 String firstMatchedNames = memberNames.stream()
				 .filter((s) -> s.startsWith("L"))
				 .findFirst().get();
		 
		 System.out.println(firstMatchedNames);
		 
		 
		 System.out.println("\n"+"------------------------------------------------------"+"\n");
		 
		 // 5. Parallelism in Java Steam
		 ArrayList<Integer> list3=new ArrayList<Integer>(Arrays.asList(1,2,3,4,5,6,7,8,9,10));
		 Stream<Integer> stream7=list3.parallelStream();
		 List<Integer> oddIntegers=stream7.filter(i -> i%2 != 0).collect(Collectors.toList());
		 System.out.println(oddIntegers);
	}	
}
